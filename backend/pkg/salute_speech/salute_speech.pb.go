// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: api/salute_speech.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EouReason int32

const (
	EouReason_UNSPECIFIED        EouReason = 0 // Not an EOU
	EouReason_ORGANIC            EouReason = 1 // Proper EOU
	EouReason_NO_SPEECH_TIMEOUT  EouReason = 2 // EOU because there was no speech for at least no_speech_timeout seconds
	EouReason_MAX_SPEECH_TIMEOUT EouReason = 3 // EOU because there was continuous speech with no breaks for at least max_speech_timeout seconds
)

// Enum value maps for EouReason.
var (
	EouReason_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ORGANIC",
		2: "NO_SPEECH_TIMEOUT",
		3: "MAX_SPEECH_TIMEOUT",
	}
	EouReason_value = map[string]int32{
		"UNSPECIFIED":        0,
		"ORGANIC":            1,
		"NO_SPEECH_TIMEOUT":  2,
		"MAX_SPEECH_TIMEOUT": 3,
	}
)

func (x EouReason) Enum() *EouReason {
	p := new(EouReason)
	*p = x
	return p
}

func (x EouReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EouReason) Descriptor() protoreflect.EnumDescriptor {
	return file_api_salute_speech_proto_enumTypes[0].Descriptor()
}

func (EouReason) Type() protoreflect.EnumType {
	return &file_api_salute_speech_proto_enumTypes[0]
}

func (x EouReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EouReason.Descriptor instead.
func (EouReason) EnumDescriptor() ([]byte, []int) {
	return file_api_salute_speech_proto_rawDescGZIP(), []int{0}
}

type RecognitionOptions_AudioEncoding int32

const (
	RecognitionOptions_AUDIO_ENCODING_UNSPECIFIED RecognitionOptions_AudioEncoding = 0
	RecognitionOptions_PCM_S16LE                  RecognitionOptions_AudioEncoding = 1 // 16-bit signed little-endian (Linear PCM)
	RecognitionOptions_OPUS                       RecognitionOptions_AudioEncoding = 2 // mime audio/ogg; codecs=opus
	RecognitionOptions_MP3                        RecognitionOptions_AudioEncoding = 3 // MPEG-1/2 Layer-3
	RecognitionOptions_FLAC                       RecognitionOptions_AudioEncoding = 4
	RecognitionOptions_ALAW                       RecognitionOptions_AudioEncoding = 5
	RecognitionOptions_MULAW                      RecognitionOptions_AudioEncoding = 6
	RecognitionOptions_G729                       RecognitionOptions_AudioEncoding = 7
)

// Enum value maps for RecognitionOptions_AudioEncoding.
var (
	RecognitionOptions_AudioEncoding_name = map[int32]string{
		0: "AUDIO_ENCODING_UNSPECIFIED",
		1: "PCM_S16LE",
		2: "OPUS",
		3: "MP3",
		4: "FLAC",
		5: "ALAW",
		6: "MULAW",
		7: "G729",
	}
	RecognitionOptions_AudioEncoding_value = map[string]int32{
		"AUDIO_ENCODING_UNSPECIFIED": 0,
		"PCM_S16LE":                  1,
		"OPUS":                       2,
		"MP3":                        3,
		"FLAC":                       4,
		"ALAW":                       5,
		"MULAW":                      6,
		"G729":                       7,
	}
)

func (x RecognitionOptions_AudioEncoding) Enum() *RecognitionOptions_AudioEncoding {
	p := new(RecognitionOptions_AudioEncoding)
	*p = x
	return p
}

func (x RecognitionOptions_AudioEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecognitionOptions_AudioEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_api_salute_speech_proto_enumTypes[1].Descriptor()
}

func (RecognitionOptions_AudioEncoding) Type() protoreflect.EnumType {
	return &file_api_salute_speech_proto_enumTypes[1]
}

func (x RecognitionOptions_AudioEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecognitionOptions_AudioEncoding.Descriptor instead.
func (RecognitionOptions_AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return file_api_salute_speech_proto_rawDescGZIP(), []int{3, 0}
}

type RecognitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*RecognitionRequest_Options
	//	*RecognitionRequest_AudioChunk
	Request isRecognitionRequest_Request `protobuf_oneof:"request"`
}

func (x *RecognitionRequest) Reset() {
	*x = RecognitionRequest{}
	mi := &file_api_salute_speech_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecognitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionRequest) ProtoMessage() {}

func (x *RecognitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_salute_speech_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionRequest.ProtoReflect.Descriptor instead.
func (*RecognitionRequest) Descriptor() ([]byte, []int) {
	return file_api_salute_speech_proto_rawDescGZIP(), []int{0}
}

func (m *RecognitionRequest) GetRequest() isRecognitionRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *RecognitionRequest) GetOptions() *RecognitionOptions {
	if x, ok := x.GetRequest().(*RecognitionRequest_Options); ok {
		return x.Options
	}
	return nil
}

func (x *RecognitionRequest) GetAudioChunk() []byte {
	if x, ok := x.GetRequest().(*RecognitionRequest_AudioChunk); ok {
		return x.AudioChunk
	}
	return nil
}

type isRecognitionRequest_Request interface {
	isRecognitionRequest_Request()
}

type RecognitionRequest_Options struct {
	Options *RecognitionOptions `protobuf:"bytes,1,opt,name=options,proto3,oneof"`
}

type RecognitionRequest_AudioChunk struct {
	AudioChunk []byte `protobuf:"bytes,2,opt,name=audio_chunk,json=audioChunk,proto3,oneof"`
}

func (*RecognitionRequest_Options) isRecognitionRequest_Request() {}

func (*RecognitionRequest_AudioChunk) isRecognitionRequest_Request() {}

type RecognitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results             []*Hypothesis        `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Eou                 bool                 `protobuf:"varint,2,opt,name=eou,proto3" json:"eou,omitempty"`                                                             // marks final result for this utterance
	EmotionsResult      *Emotions            `protobuf:"bytes,3,opt,name=emotions_result,json=emotionsResult,proto3" json:"emotions_result,omitempty"`                  // may be set on end of utterance
	ProcessedAudioStart *durationpb.Duration `protobuf:"bytes,4,opt,name=processed_audio_start,json=processedAudioStart,proto3" json:"processed_audio_start,omitempty"` // starting position of processed audio
	ProcessedAudioEnd   *durationpb.Duration `protobuf:"bytes,5,opt,name=processed_audio_end,json=processedAudioEnd,proto3" json:"processed_audio_end,omitempty"`       // ending position of processed audio
	BackendInfo         *BackendInfo         `protobuf:"bytes,6,opt,name=backend_info,json=backendInfo,proto3" json:"backend_info,omitempty"`
	Channel             int32                `protobuf:"varint,7,opt,name=channel,proto3" json:"channel,omitempty"`
	SpeakerInfo         *SpeakerInfo         `protobuf:"bytes,8,opt,name=speaker_info,json=speakerInfo,proto3" json:"speaker_info,omitempty"`
	EouReason           EouReason            `protobuf:"varint,9,opt,name=eou_reason,json=eouReason,proto3,enum=smartspeech.recognition.v1.EouReason" json:"eou_reason,omitempty"` // what caused the end of this utterance (eou must be true)
	Insight             string               `protobuf:"bytes,10,opt,name=insight,proto3" json:"insight,omitempty"`                                                                // json with insights response - will be filled in the last response
}

func (x *RecognitionResponse) Reset() {
	*x = RecognitionResponse{}
	mi := &file_api_salute_speech_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecognitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionResponse) ProtoMessage() {}

func (x *RecognitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_salute_speech_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionResponse.ProtoReflect.Descriptor instead.
func (*RecognitionResponse) Descriptor() ([]byte, []int) {
	return file_api_salute_speech_proto_rawDescGZIP(), []int{1}
}

func (x *RecognitionResponse) GetResults() []*Hypothesis {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RecognitionResponse) GetEou() bool {
	if x != nil {
		return x.Eou
	}
	return false
}

func (x *RecognitionResponse) GetEmotionsResult() *Emotions {
	if x != nil {
		return x.EmotionsResult
	}
	return nil
}

func (x *RecognitionResponse) GetProcessedAudioStart() *durationpb.Duration {
	if x != nil {
		return x.ProcessedAudioStart
	}
	return nil
}

func (x *RecognitionResponse) GetProcessedAudioEnd() *durationpb.Duration {
	if x != nil {
		return x.ProcessedAudioEnd
	}
	return nil
}

func (x *RecognitionResponse) GetBackendInfo() *BackendInfo {
	if x != nil {
		return x.BackendInfo
	}
	return nil
}

func (x *RecognitionResponse) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *RecognitionResponse) GetSpeakerInfo() *SpeakerInfo {
	if x != nil {
		return x.SpeakerInfo
	}
	return nil
}

func (x *RecognitionResponse) GetEouReason() EouReason {
	if x != nil {
		return x.EouReason
	}
	return EouReason_UNSPECIFIED
}

func (x *RecognitionResponse) GetInsight() string {
	if x != nil {
		return x.Insight
	}
	return ""
}

type AsyncRecognizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options       *RecognitionOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	RequestFileId string              `protobuf:"bytes,2,opt,name=request_file_id,json=requestFileId,proto3" json:"request_file_id,omitempty"`
}

func (x *AsyncRecognizeRequest) Reset() {
	*x = AsyncRecognizeRequest{}
	mi := &file_api_salute_speech_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncRecognizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncRecognizeRequest) ProtoMessage() {}

func (x *AsyncRecognizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_salute_speech_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncRecognizeRequest.ProtoReflect.Descriptor instead.
func (*AsyncRecognizeRequest) Descriptor() ([]byte, []int) {
	return file_api_salute_speech_proto_rawDescGZIP(), []int{2}
}

func (x *AsyncRecognizeRequest) GetOptions() *RecognitionOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AsyncRecognizeRequest) GetRequestFileId() string {
	if x != nil {
		return x.RequestFileId
	}
	return ""
}

type RecognitionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioEncoding            RecognitionOptions_AudioEncoding `protobuf:"varint,1,opt,name=audio_encoding,json=audioEncoding,proto3,enum=smartspeech.recognition.v1.RecognitionOptions_AudioEncoding" json:"audio_encoding,omitempty"`
	SampleRate               int32                            `protobuf:"varint,2,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"` // For PCM_16LE, ALAW, MULAW audio encodings
	Language                 string                           `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`                        // Language code in RFC-3066 format, i.e.: ru-RU
	Model                    string                           `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	HypothesesCount          int32                            `protobuf:"varint,5,opt,name=hypotheses_count,json=hypothesesCount,proto3" json:"hypotheses_count,omitempty"`
	Hints                    *Hints                           `protobuf:"bytes,6,opt,name=hints,proto3" json:"hints,omitempty"`
	EnableProfanityFilter    bool                             `protobuf:"varint,7,opt,name=enable_profanity_filter,json=enableProfanityFilter,proto3" json:"enable_profanity_filter,omitempty"`
	EnableMultiUtterance     bool                             `protobuf:"varint,8,opt,name=enable_multi_utterance,json=enableMultiUtterance,proto3" json:"enable_multi_utterance,omitempty"`
	EnablePartialResults     bool                             `protobuf:"varint,9,opt,name=enable_partial_results,json=enablePartialResults,proto3" json:"enable_partial_results,omitempty"`
	NoSpeechTimeout          *durationpb.Duration             `protobuf:"bytes,10,opt,name=no_speech_timeout,json=noSpeechTimeout,proto3" json:"no_speech_timeout,omitempty"`
	MaxSpeechTimeout         *durationpb.Duration             `protobuf:"bytes,11,opt,name=max_speech_timeout,json=maxSpeechTimeout,proto3" json:"max_speech_timeout,omitempty"`
	ChannelsCount            int32                            `protobuf:"varint,12,opt,name=channels_count,json=channelsCount,proto3" json:"channels_count,omitempty"`
	SpeakerSeparationOptions *SpeakerSeparationOptions        `protobuf:"bytes,13,opt,name=speaker_separation_options,json=speakerSeparationOptions,proto3" json:"speaker_separation_options,omitempty"`
	InsightModels            []string                         `protobuf:"bytes,14,rep,name=insight_models,json=insightModels,proto3" json:"insight_models,omitempty"`
	ForceCyrillic            bool                             `protobuf:"varint,15,opt,name=force_cyrillic,json=forceCyrillic,proto3" json:"force_cyrillic,omitempty"`
	EnableLongUtterances     *bool                            `protobuf:"varint,16,opt,name=enable_long_utterances,json=enableLongUtterances,proto3,oneof" json:"enable_long_utterances,omitempty"`
}

func (x *RecognitionOptions) Reset() {
	*x = RecognitionOptions{}
	mi := &file_api_salute_speech_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecognitionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionOptions) ProtoMessage() {}

func (x *RecognitionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_salute_speech_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionOptions.ProtoReflect.Descriptor instead.
func (*RecognitionOptions) Descriptor() ([]byte, []int) {
	return file_api_salute_speech_proto_rawDescGZIP(), []int{3}
}

func (x *RecognitionOptions) GetAudioEncoding() RecognitionOptions_AudioEncoding {
	if x != nil {
		return x.AudioEncoding
	}
	return RecognitionOptions_AUDIO_ENCODING_UNSPECIFIED
}

func (x *RecognitionOptions) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *RecognitionOptions) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RecognitionOptions) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *RecognitionOptions) GetHypothesesCount() int32 {
	if x != nil {
		return x.HypothesesCount
	}
	return 0
}

func (x *RecognitionOptions) GetHints() *Hints {
	if x != nil {
		return x.Hints
	}
	return nil
}

func (x *RecognitionOptions) GetEnableProfanityFilter() bool {
	if x != nil {
		return x.EnableProfanityFilter
	}
	return false
}

func (x *RecognitionOptions) GetEnableMultiUtterance() bool {
	if x != nil {
		return x.EnableMultiUtterance
	}
	return false
}

func (x *RecognitionOptions) GetEnablePartialResults() bool {
	if x != nil {
		return x.EnablePartialResults
	}
	return false
}

func (x *RecognitionOptions) GetNoSpeechTimeout() *durationpb.Duration {
	if x != nil {
		return x.NoSpeechTimeout
	}
	return nil
}

func (x *RecognitionOptions) GetMaxSpeechTimeout() *durationpb.Duration {
	if x != nil {
		return x.MaxSpeechTimeout
	}
	return nil
}

func (x *RecognitionOptions) GetChannelsCount() int32 {
	if x != nil {
		return x.ChannelsCount
	}
	return 0
}

func (x *RecognitionOptions) GetSpeakerSeparationOptions() *SpeakerSeparationOptions {
	if x != nil {
		return x.SpeakerSeparationOptions
	}
	return nil
}

func (x *RecognitionOptions) GetInsightModels() []string {
	if x != nil {
		return x.InsightModels
	}
	return nil
}

func (x *RecognitionOptions) GetForceCyrillic() bool {
	if x != nil {
		return x.ForceCyrillic
	}
	return false
}

func (x *RecognitionOptions) GetEnableLongUtterances() bool {
	if x != nil && x.EnableLongUtterances != nil {
		return *x.EnableLongUtterances
	}
	return false
}

type Hints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Words         []string             `protobuf:"bytes,1,rep,name=words,proto3" json:"words,omitempty"`
	EnableLetters bool                 `protobuf:"varint,2,opt,name=enable_letters,json=enableLetters,proto3" json:"enable_letters,omitempty"`
	EouTimeout    *durationpb.Duration `protobuf:"bytes,3,opt,name=eou_timeout,json=eouTimeout,proto3" json:"eou_timeout,omitempty"`
}

func (x *Hints) Reset() {
	*x = Hints{}
	mi := &file_api_salute_speech_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hints) ProtoMessage() {}

func (x *Hints) ProtoReflect() protoreflect.Message {
	mi := &file_api_salute_speech_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hints.ProtoReflect.Descriptor instead.
func (*Hints) Descriptor() ([]byte, []int) {
	return file_api_salute_speech_proto_rawDescGZIP(), []int{4}
}

func (x *Hints) GetWords() []string {
	if x != nil {
		return x.Words
	}
	return nil
}

func (x *Hints) GetEnableLetters() bool {
	if x != nil {
		return x.EnableLetters
	}
	return false
}

func (x *Hints) GetEouTimeout() *durationpb.Duration {
	if x != nil {
		return x.EouTimeout
	}
	return nil
}

type SpeakerSeparationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable                bool  `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	EnableOnlyMainSpeaker bool  `protobuf:"varint,2,opt,name=enable_only_main_speaker,json=enableOnlyMainSpeaker,proto3" json:"enable_only_main_speaker,omitempty"` // return only main speaker
	Count                 int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                                                                  // number of expected speakers
}

func (x *SpeakerSeparationOptions) Reset() {
	*x = SpeakerSeparationOptions{}
	mi := &file_api_salute_speech_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeakerSeparationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerSeparationOptions) ProtoMessage() {}

func (x *SpeakerSeparationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_salute_speech_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerSeparationOptions.ProtoReflect.Descriptor instead.
func (*SpeakerSeparationOptions) Descriptor() ([]byte, []int) {
	return file_api_salute_speech_proto_rawDescGZIP(), []int{5}
}

func (x *SpeakerSeparationOptions) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *SpeakerSeparationOptions) GetEnableOnlyMainSpeaker() bool {
	if x != nil {
		return x.EnableOnlyMainSpeaker
	}
	return false
}

func (x *SpeakerSeparationOptions) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Hypothesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text           string                      `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`                                           // non-normalized text result
	NormalizedText string                      `protobuf:"bytes,2,opt,name=normalized_text,json=normalizedText,proto3" json:"normalized_text,omitempty"` // normalized text result
	Start          *durationpb.Duration        `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`                                         // hypothesis starting position from current utterance start
	End            *durationpb.Duration        `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`                                             // hypothesis final position from current utterance start
	WordAlignments []*Hypothesis_WordAlignment `protobuf:"bytes,5,rep,name=word_alignments,json=wordAlignments,proto3" json:"word_alignments,omitempty"` // alignments of single words in audio stream
}

func (x *Hypothesis) Reset() {
	*x = Hypothesis{}
	mi := &file_api_salute_speech_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hypothesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hypothesis) ProtoMessage() {}

func (x *Hypothesis) ProtoReflect() protoreflect.Message {
	mi := &file_api_salute_speech_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hypothesis.ProtoReflect.Descriptor instead.
func (*Hypothesis) Descriptor() ([]byte, []int) {
	return file_api_salute_speech_proto_rawDescGZIP(), []int{6}
}

func (x *Hypothesis) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Hypothesis) GetNormalizedText() string {
	if x != nil {
		return x.NormalizedText
	}
	return ""
}

func (x *Hypothesis) GetStart() *durationpb.Duration {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Hypothesis) GetEnd() *durationpb.Duration {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Hypothesis) GetWordAlignments() []*Hypothesis_WordAlignment {
	if x != nil {
		return x.WordAlignments
	}
	return nil
}

type Emotions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positive float32 `protobuf:"fixed32,1,opt,name=positive,proto3" json:"positive,omitempty"` // confidence [0.0 - 1.0]
	Neutral  float32 `protobuf:"fixed32,2,opt,name=neutral,proto3" json:"neutral,omitempty"`
	Negative float32 `protobuf:"fixed32,3,opt,name=negative,proto3" json:"negative,omitempty"`
}

func (x *Emotions) Reset() {
	*x = Emotions{}
	mi := &file_api_salute_speech_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Emotions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emotions) ProtoMessage() {}

func (x *Emotions) ProtoReflect() protoreflect.Message {
	mi := &file_api_salute_speech_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emotions.ProtoReflect.Descriptor instead.
func (*Emotions) Descriptor() ([]byte, []int) {
	return file_api_salute_speech_proto_rawDescGZIP(), []int{7}
}

func (x *Emotions) GetPositive() float32 {
	if x != nil {
		return x.Positive
	}
	return 0
}

func (x *Emotions) GetNeutral() float32 {
	if x != nil {
		return x.Neutral
	}
	return 0
}

func (x *Emotions) GetNegative() float32 {
	if x != nil {
		return x.Negative
	}
	return 0
}

type BackendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName     string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	ModelVersion  string `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	ServerVersion string `protobuf:"bytes,3,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
}

func (x *BackendInfo) Reset() {
	*x = BackendInfo{}
	mi := &file_api_salute_speech_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackendInfo) ProtoMessage() {}

func (x *BackendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_salute_speech_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackendInfo.ProtoReflect.Descriptor instead.
func (*BackendInfo) Descriptor() ([]byte, []int) {
	return file_api_salute_speech_proto_rawDescGZIP(), []int{8}
}

func (x *BackendInfo) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *BackendInfo) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *BackendInfo) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

type SpeakerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeakerId             int32   `protobuf:"varint,1,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	MainSpeakerConfidence float32 `protobuf:"fixed32,2,opt,name=main_speaker_confidence,json=mainSpeakerConfidence,proto3" json:"main_speaker_confidence,omitempty"` // main speaker feature [0.0 - 1.0]
}

func (x *SpeakerInfo) Reset() {
	*x = SpeakerInfo{}
	mi := &file_api_salute_speech_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeakerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerInfo) ProtoMessage() {}

func (x *SpeakerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_salute_speech_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerInfo.ProtoReflect.Descriptor instead.
func (*SpeakerInfo) Descriptor() ([]byte, []int) {
	return file_api_salute_speech_proto_rawDescGZIP(), []int{9}
}

func (x *SpeakerInfo) GetSpeakerId() int32 {
	if x != nil {
		return x.SpeakerId
	}
	return 0
}

func (x *SpeakerInfo) GetMainSpeakerConfidence() float32 {
	if x != nil {
		return x.MainSpeakerConfidence
	}
	return 0
}

type Hypothesis_WordAlignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word  string               `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`   // single word
	Start *durationpb.Duration `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"` // starting position of the word in audio stream
	End   *durationpb.Duration `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`     // ending position of the word in audio stream
}

func (x *Hypothesis_WordAlignment) Reset() {
	*x = Hypothesis_WordAlignment{}
	mi := &file_api_salute_speech_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hypothesis_WordAlignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hypothesis_WordAlignment) ProtoMessage() {}

func (x *Hypothesis_WordAlignment) ProtoReflect() protoreflect.Message {
	mi := &file_api_salute_speech_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hypothesis_WordAlignment.ProtoReflect.Descriptor instead.
func (*Hypothesis_WordAlignment) Descriptor() ([]byte, []int) {
	return file_api_salute_speech_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Hypothesis_WordAlignment) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Hypothesis_WordAlignment) GetStart() *durationpb.Duration {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Hypothesis_WordAlignment) GetEnd() *durationpb.Duration {
	if x != nil {
		return x.End
	}
	return nil
}

var File_api_salute_speech_proto protoreflect.FileDescriptor

var file_api_salute_speech_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x61, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe4, 0x04, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x70,
	0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65,
	0x6f, 0x75, 0x12, 0x4d, 0x0a, 0x0f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0e, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4d, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x49, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a,
	0x0a, 0x65, 0x6f, 0x75, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6f, 0x75, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x6f, 0x75, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x22, 0x89, 0x01,
	0x0a, 0x15, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x9f, 0x08, 0x0a, 0x12, 0x52, 0x65,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x63, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x79, 0x70, 0x6f,
	0x74, 0x68, 0x65, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x61, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x45, 0x0a, 0x11, 0x6e, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6e, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x47, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x72, 0x0a, 0x1a, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x18, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x79, 0x72, 0x69,
	0x6c, 0x6c, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x43, 0x79, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x16, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x14, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x22, 0x7a, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x45,
	0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x43, 0x4d, 0x5f, 0x53, 0x31, 0x36,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x55, 0x53, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x50, 0x33, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x43, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x4c, 0x41, 0x57, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x55, 0x4c, 0x41, 0x57, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x37, 0x32, 0x39, 0x10, 0x07,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67,
	0x5f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x05,
	0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x6f, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x6f, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x81,
	0x01, 0x0a, 0x18, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x6c,
	0x79, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x8a, 0x03, 0x0a, 0x0a, 0x48, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2f,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x2b, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x5d, 0x0a, 0x0f,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x57, 0x6f,
	0x72, 0x64, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x77, 0x6f, 0x72,
	0x64, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x81, 0x01, 0x0a, 0x0d,
	0x57, 0x6f, 0x72, 0x64, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2b, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22,
	0x5c, 0x0a, 0x08, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x75, 0x74, 0x72,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x78, 0x0a,
	0x0b, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2a, 0x58, 0x0a,
	0x09, 0x45, 0x6f, 0x75, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x52, 0x47, 0x41, 0x4e, 0x49, 0x43, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x32, 0x7f, 0x0a, 0x0b, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12, 0x70, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x7a, 0x65, 0x12, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x13, 0x0a, 0x04, 0x54, 0x4f, 0x44, 0x4f,
	0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_salute_speech_proto_rawDescOnce sync.Once
	file_api_salute_speech_proto_rawDescData = file_api_salute_speech_proto_rawDesc
)

func file_api_salute_speech_proto_rawDescGZIP() []byte {
	file_api_salute_speech_proto_rawDescOnce.Do(func() {
		file_api_salute_speech_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_salute_speech_proto_rawDescData)
	})
	return file_api_salute_speech_proto_rawDescData
}

var file_api_salute_speech_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_salute_speech_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_salute_speech_proto_goTypes = []any{
	(EouReason)(0),                        // 0: smartspeech.recognition.v1.EouReason
	(RecognitionOptions_AudioEncoding)(0), // 1: smartspeech.recognition.v1.RecognitionOptions.AudioEncoding
	(*RecognitionRequest)(nil),            // 2: smartspeech.recognition.v1.RecognitionRequest
	(*RecognitionResponse)(nil),           // 3: smartspeech.recognition.v1.RecognitionResponse
	(*AsyncRecognizeRequest)(nil),         // 4: smartspeech.recognition.v1.AsyncRecognizeRequest
	(*RecognitionOptions)(nil),            // 5: smartspeech.recognition.v1.RecognitionOptions
	(*Hints)(nil),                         // 6: smartspeech.recognition.v1.Hints
	(*SpeakerSeparationOptions)(nil),      // 7: smartspeech.recognition.v1.SpeakerSeparationOptions
	(*Hypothesis)(nil),                    // 8: smartspeech.recognition.v1.Hypothesis
	(*Emotions)(nil),                      // 9: smartspeech.recognition.v1.Emotions
	(*BackendInfo)(nil),                   // 10: smartspeech.recognition.v1.BackendInfo
	(*SpeakerInfo)(nil),                   // 11: smartspeech.recognition.v1.SpeakerInfo
	(*Hypothesis_WordAlignment)(nil),      // 12: smartspeech.recognition.v1.Hypothesis.WordAlignment
	(*durationpb.Duration)(nil),           // 13: google.protobuf.Duration
}
var file_api_salute_speech_proto_depIdxs = []int32{
	5,  // 0: smartspeech.recognition.v1.RecognitionRequest.options:type_name -> smartspeech.recognition.v1.RecognitionOptions
	8,  // 1: smartspeech.recognition.v1.RecognitionResponse.results:type_name -> smartspeech.recognition.v1.Hypothesis
	9,  // 2: smartspeech.recognition.v1.RecognitionResponse.emotions_result:type_name -> smartspeech.recognition.v1.Emotions
	13, // 3: smartspeech.recognition.v1.RecognitionResponse.processed_audio_start:type_name -> google.protobuf.Duration
	13, // 4: smartspeech.recognition.v1.RecognitionResponse.processed_audio_end:type_name -> google.protobuf.Duration
	10, // 5: smartspeech.recognition.v1.RecognitionResponse.backend_info:type_name -> smartspeech.recognition.v1.BackendInfo
	11, // 6: smartspeech.recognition.v1.RecognitionResponse.speaker_info:type_name -> smartspeech.recognition.v1.SpeakerInfo
	0,  // 7: smartspeech.recognition.v1.RecognitionResponse.eou_reason:type_name -> smartspeech.recognition.v1.EouReason
	5,  // 8: smartspeech.recognition.v1.AsyncRecognizeRequest.options:type_name -> smartspeech.recognition.v1.RecognitionOptions
	1,  // 9: smartspeech.recognition.v1.RecognitionOptions.audio_encoding:type_name -> smartspeech.recognition.v1.RecognitionOptions.AudioEncoding
	6,  // 10: smartspeech.recognition.v1.RecognitionOptions.hints:type_name -> smartspeech.recognition.v1.Hints
	13, // 11: smartspeech.recognition.v1.RecognitionOptions.no_speech_timeout:type_name -> google.protobuf.Duration
	13, // 12: smartspeech.recognition.v1.RecognitionOptions.max_speech_timeout:type_name -> google.protobuf.Duration
	7,  // 13: smartspeech.recognition.v1.RecognitionOptions.speaker_separation_options:type_name -> smartspeech.recognition.v1.SpeakerSeparationOptions
	13, // 14: smartspeech.recognition.v1.Hints.eou_timeout:type_name -> google.protobuf.Duration
	13, // 15: smartspeech.recognition.v1.Hypothesis.start:type_name -> google.protobuf.Duration
	13, // 16: smartspeech.recognition.v1.Hypothesis.end:type_name -> google.protobuf.Duration
	12, // 17: smartspeech.recognition.v1.Hypothesis.word_alignments:type_name -> smartspeech.recognition.v1.Hypothesis.WordAlignment
	13, // 18: smartspeech.recognition.v1.Hypothesis.WordAlignment.start:type_name -> google.protobuf.Duration
	13, // 19: smartspeech.recognition.v1.Hypothesis.WordAlignment.end:type_name -> google.protobuf.Duration
	2,  // 20: smartspeech.recognition.v1.SmartSpeech.Recognize:input_type -> smartspeech.recognition.v1.RecognitionRequest
	3,  // 21: smartspeech.recognition.v1.SmartSpeech.Recognize:output_type -> smartspeech.recognition.v1.RecognitionResponse
	21, // [21:22] is the sub-list for method output_type
	20, // [20:21] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_api_salute_speech_proto_init() }
func file_api_salute_speech_proto_init() {
	if File_api_salute_speech_proto != nil {
		return
	}
	file_api_salute_speech_proto_msgTypes[0].OneofWrappers = []any{
		(*RecognitionRequest_Options)(nil),
		(*RecognitionRequest_AudioChunk)(nil),
	}
	file_api_salute_speech_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_salute_speech_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_salute_speech_proto_goTypes,
		DependencyIndexes: file_api_salute_speech_proto_depIdxs,
		EnumInfos:         file_api_salute_speech_proto_enumTypes,
		MessageInfos:      file_api_salute_speech_proto_msgTypes,
	}.Build()
	File_api_salute_speech_proto = out.File
	file_api_salute_speech_proto_rawDesc = nil
	file_api_salute_speech_proto_goTypes = nil
	file_api_salute_speech_proto_depIdxs = nil
}
